/*
 * Team : AGF AM / OSI / SI / BO
 *
 * Copyright (c) 2001 AGF Asset Management.
 */
package generated;

import net.codjo.mad.server.handler.*;
import net.codjo.mad.server.util.*;
import java.util.*;
import org.exolab.castor.jdo.*;
import org.w3c.dom.*;

import java.sql.*;
import net.codjo.mad.server.handler.util.QueryUtil;
/**
 * Handler de création pour generated.Dividend.
 */
public class NewDividendWithAuditHandler extends AbstractHandler {

    Map setters = new HashMap();

    public NewDividendWithAuditHandler() {
            setters.put("dividendId",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.setDividendId(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });

            setters.put("createdBy",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.getAudit().setCreatedBy(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });

            setters.put("updatedBy",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.getAudit().setUpdatedBy(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });

            setters.put("dividendLabel",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.setDividendLabel(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });

    }


    public String getId() {
        return "newDividendWithAudit";
    }


    public String proceed(Node node) throws HandlerException {
        try {
            Dividend obj = new Dividend();
            Map fields = XMLUtils.getRowFields(node);

            for (Iterator i = fields.entrySet().iterator(); i.hasNext(); ) {
                Map.Entry item = (Map.Entry) i.next();
                String name = item.getKey().toString();
                String value = (String) item.getValue();

                Setter props = (Setter) setters.get(name);
                try {
                    props.set(obj, value);
                }
                catch (Exception ex) {
                    throw new HandlerException("Valeur '" +  value + "' incorrecte pour " + name, ex);
                }
            }


            obj.getAudit().setCreationDatetime(new java.sql.Timestamp(System.currentTimeMillis()));
            obj.getAudit().setCreationBy(this.getContext().getUser());
            obj.getAudit().setUpdateBy(null);
            obj.getAudit().setUpdateDatetime(null);

            createBean(obj);

            String requestId = XMLUtils.getAttribute(node, "request_id");

            String expected = "<result request_id=\"" + requestId + "\"><primarykey>"
                     + "<field name=\"dividendId\"/>"
                     + "</primarykey><row>"
                     + "<field name=\"dividendId\">" + XMLUtils.convertToStringValue(obj.getDividendId()) + "</field>"
                     + "</row></result>";

            return expected;
        }
        catch (HandlerException ex) {
            throw ex;
        }
        catch (Exception ex) {
            throw new HandlerException(ex);
        }
    }


    protected void createBean(Dividend obj) throws PersistenceException {
        PreparedStatement query = null;
        Connection connection = null;
        try {
            connection = getContext().getTxConnection();
            query = connection.prepareStatement(QueryUtil.replaceUser("exec sp_Mint_CreateNewDividend(@DIVIDEND_ID=?,@CREATED_BY=?) ", getContext().getUser()));

            query.setString(1, obj.getDividendId());
            query.setString(2, obj.getAudit().getCreatedBy());
            query.setString(3, obj.getAudit().getUpdatedBy());
            query.setString(4, obj.getDividendLabel());

            ResultSet rs = query.executeQuery();

            if (rs.next()) {

            obj.setDividendId(rs.getString(1));

            }

            rs.close();
        }
        catch (SQLException exception) {
            throw new PersistenceException(exception.getLocalizedMessage(), exception);
        }
        finally {
            try {
                query.close();
                connection.close();
            }
            catch (SQLException exception) {
                throw new PersistenceException(exception.getLocalizedMessage(), exception);
            }
        }
    }


    private static interface Setter {
        public void set(Dividend dv, String xmlValue);
    }


   private String getStatus(){
        return "INSERT";
   }

   
    public static String toSqlName(String propertyName) {
        String sqlName = toSqlUpper(propertyName);
        if (sqlName.length() > 28) {
            throw new IllegalArgumentException("La colonne pour le field " + propertyName
                    + " dépasse 28 caractères ! C'est pas bien !! "
                    + " Et quand je dis que c'est pas bien, c'est que c'est vraiment pas bien !"
                    + " m'enfin, il faut relativiser quand meme, c'est pas le bout du monde "
                    + " je vais tout simplement bloquer la génération jusqu'a ce que vous "
                    + " corrigiez le probleme !");
        }
        return sqlName;
    }


    public static String toSqlUpper(String propertyName) {
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < propertyName.length(); i++) {
            if (Character.isUpperCase(propertyName.charAt(i))) {
                buffer.append('_');
            }
            buffer.append(propertyName.charAt(i));
        }

        String sqlName = buffer.toString().toUpperCase();
        return sqlName;
    }
}
