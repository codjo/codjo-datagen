/*
 * Team : AGF AM / OSI / SI / BO
 *
 * Copyright (c) 2001 AGF Asset Management.
 */
package generated;
import net.codjo.control.common.ControlException;
import net.codjo.control.common.manager.ControlManager;
import net.codjo.mad.server.handler.*;
import net.codjo.mad.server.util.*;
import java.util.*;
import org.exolab.castor.jdo.*;
import org.w3c.dom.*;
/**
 * Handler de création pour generated.Dividend.
 */
public class NewDividendHandler extends AbstractHandler {
    private ControlManager controlManager;
    Map setters = new HashMap();


    public NewDividendHandler(ControlManager controlManager) {
        this.controlManager = controlManager;

        setters.put("portfolioCode",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.setPortfolioCode(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });
        setters.put("netDividend",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.setNetDividend(XMLUtils.convertFromStringValue(java.math.BigDecimal.class, xmlValue));
                }
            });
        setters.put("dividendDate",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.setDividendDate(XMLUtils.convertFromStringValue(java.sql.Timestamp.class, xmlValue));
                }
            });
        setters.put("automaticUpdate",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.setAutomaticUpdate((XMLUtils.convertFromStringValue(Boolean.class, xmlValue)).booleanValue());
                }
            });
        setters.put("comment",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.getAudit().setComment(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });
        setters.put("createdBy",
            new Setter() {
                public void set(Dividend dv, String xmlValue) {
                    dv.getAudit().setCreatedBy(XMLUtils.convertFromStringValue(String.class, xmlValue));
                }
            });
    }


    public String getId() {
        return "newDividend";
    }


    public String proceed(Node node) throws HandlerException {
        try {
            Dividend obj = new Dividend();
            Map fields = XMLUtils.getRowFields(node);

            for (Iterator i = fields.entrySet().iterator(); i.hasNext(); ) {
                Map.Entry item = (Map.Entry) i.next();
                String name = item.getKey().toString();
                String value = (String) item.getValue();

                Setter props = (Setter) setters.get(name);
                try {
                    props.set(obj, value);
                }
                catch (Exception ex) {
                    throw new HandlerException("Valeur '" +  value + "' incorrecte pour " + name, ex);
                }
            }

            obj.getAudit().setCreationDatetime(new java.sql.Timestamp(System.currentTimeMillis()));
            obj.getAudit().setCreationBy(this.getContext().getUser());
            obj.getAudit().setUpdateBy(null);
            obj.getAudit().setUpdateDatetime(null);

             executeControlForAdd(obj);

            net.codjo.sif.data.DataAudit dataAudit = new net.codjo.sif.data.DataAudit();
            HashMap keyMap = new HashMap();
            StringTokenizer t = new StringTokenizer(getFunctionalKey(), ",");
            String functionalKeyStr = "";

            if (t.countTokens() == 1) {
                functionalKeyStr = toSqlName(getFunctionalKey()) + "= '" + fields.get(getFunctionalKey().trim())
                        + "',";
            } else {

                while (t.hasMoreElements()) {
                    String fieldName = t.nextElement().toString().trim();
                    keyMap.put(fieldName, fields.get(fieldName));
                }
                int i = 0;

                Iterator iter = keyMap.keySet().iterator();
                while (iter.hasNext()) {
                    String fieldName = (String) iter.next();
                    functionalKeyStr += toSqlName(fieldName) + "='" + (String) keyMap.get(fieldName) + "',";
                }
            }


            dataAudit.setDbTableName(getDbTableName());
            dataAudit.setFunctionalKey(functionalKeyStr.substring(0, functionalKeyStr.length() - 1));
            dataAudit.setStatus(getStatus());
            dataAudit.setUserName(this.getContext().getUser());
            dataAudit.setInsertionDate(new java.sql.Timestamp(System.currentTimeMillis()));

            createDataAudit(dataAudit);


            createBean(obj);

            String requestId = XMLUtils.getAttribute(node, "request_id");

            String expected = "<result request_id=\"" + requestId + "\"><primarykey>"
                     + "<field name=\"portfolioCode\"/>"
                     + "<field name=\"dividendDate\"/>"
                     + "</primarykey><row>"
                     + "<field name=\"portfolioCode\">" + XMLUtils.convertToStringValue(obj.getPortfolioCode()) + "</field>"
                     + "<field name=\"dividendDate\">" + XMLUtils.convertToStringValue(obj.getDividendDate()) + "</field>"
                     + "</row></result>";

            return expected;
        }
        catch (HandlerException ex) {
            throw ex;
        }
        catch (Exception ex) {
            throw new HandlerException(ex);
        }

    }

    protected void createBean(Dividend obj) throws PersistenceException {
        Database db = getContext().getDatabase();
        try {
            db.create(obj);
        }
        finally {
            db.close();
        }
    }
    protected void createDataAudit(net.codjo.sif.data.DataAudit obj) throws PersistenceException {
        Database db = getContext().getDatabase();
        try {
            db.create(obj);
        }
        finally {
            db.close();
        }
    }

    private void executeControlForAdd(Dividend obj) throws ControlException {
        controlManager.controlNewEntity(obj);
    }

    private static interface Setter {
        public void set(Dividend dv, String xmlValue);
    }

    private String getDbTableName(){
    return "AP_DIVIDEND";
    }

    private String getFunctionalKey(){
    return "portfolioCode,netDividend";
    }
    private String getStatus(){
    return "INSERT";
    }
        public static String toSqlName(String propertyName) {
        String sqlName = toSqlUpper(propertyName);
        if (sqlName.length() > 28) {
            throw new IllegalArgumentException("La colonne pour le field " + propertyName
                    + " dépasse 28 caractères ! C'est pas bien !! "
                    + " Et quand je dis que c'est pas bien, c'est que c'est vraiment pas bien !"
                    + " m'enfin, il faut relativiser quand meme, c'est pas le bout du monde "
                    + " je vais tout simplement bloquer la génération jusqu'a ce que vous "
                    + " corrigiez le probleme !");
        }
        return sqlName;
    }


    public static String toSqlUpper(String propertyName) {
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < propertyName.length(); i++) {
            if (Character.isUpperCase(propertyName.charAt(i))) {
                buffer.append('_');
            }
            buffer.append(propertyName.charAt(i));
        }

        String sqlName = buffer.toString().toUpperCase();
        return sqlName;
    }
}
