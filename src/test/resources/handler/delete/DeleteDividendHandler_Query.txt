/*
 * Team : AGF AM / OSI / SI / BO
 *
 * Copyright (c) 2001 AGF Asset Management.
 */
package generated;
import net.codjo.mad.server.handler.AbstractHandler;
import net.codjo.mad.server.handler.HandlerException;
import net.codjo.mad.server.handler.XMLUtils;
import org.w3c.dom.Node;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;

/**
 * Handler de destruction pour generated.Dividend.
 */
public class DeleteDividendHandler extends AbstractHandler {
    private static final String SQL = "delete ?, ?";

    public String getId() {
        return "deleteDividend";
    }

    public String proceed(Node node) throws HandlerException {
        try {
            Map pks = XMLUtils.getPrimaryKeys(node);

            Connection con = getContext().getTxConnection();
            PreparedStatement stmt = null;
            try {
                stmt = con.prepareStatement(SQL);
                fillSqlQuery(stmt, pks);

                stmt.executeUpdate();

                String requestId = XMLUtils.getAttribute(node, "request_id");
                String expected =
                    "<result request_id=\"" + requestId + "\"><primarykey>"
                    + "<field name=\"portfolioCode\"/>"
                    + "<field name=\"dividendDate\"/>" + "</primarykey><row>"
                    + "<field name=\"portfolioCode\">"
                    + XMLUtils.convertToStringValue(pks.get("portfolioCode"))
                    + "</field>" + "<field name=\"dividendDate\">"
                    + XMLUtils.convertToStringValue(pks.get("dividendDate")) + "</field>"
                    + "</row></result>";

                return expected;
            }
            finally {
                if (stmt != null) {
                    stmt.close();
                }
                con.close();
            }
        }
        catch (Exception ex) {
            throw new HandlerException(ex);
        }
    }


    private void fillSqlQuery(final PreparedStatement query, final Map pks)
        throws SQLException {
        query.setString(1,
            XMLUtils.convertFromStringValue(String.class,
                (String) pks.get("portfolioCode")));
        query.setTimestamp(2,
            XMLUtils.convertFromStringValue(java.sql.Timestamp.class,
                (String) pks.get("dividendDate")));
    }
}
