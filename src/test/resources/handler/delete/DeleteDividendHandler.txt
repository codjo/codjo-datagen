/*
 * Team : AGF AM / OSI / SI / BO
 *
 * Copyright (c) 2001 AGF Asset Management.
 */
package generated;

import net.codjo.control.common.ControlException;
import net.codjo.control.common.manager.ControlManager;

import net.codjo.mad.server.handler.*;
import net.codjo.mad.server.util.*;
import java.util.*;
import org.exolab.castor.jdo.*;
import org.w3c.dom.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 * Handler de destruction pour
        generated.Dividend.
 *
 */
public class DeleteDividendHandler extends AbstractHandler {

    private ControlManager controlManager;

    private final static String oql = "SELECT p FROM "+
        " generated.Dividend p WHERE portfolioCode = $1 and dividendDate = $2";


            private static final String SELECT_SQL = "select * from AP_DIVIDEND where PORTFOLIO_CODE = ? and DIVIDEND_DATE = ?";
            private static final String AUDIT_SQL = "insert into AP_DATA_AUDIT (DB_TABLE_NAME,FUNCTIONAL_KEY,STATUS,USER_NAME,INSERTION_DATE)" +
                                                    "values (?,?,'DELETE',?,getdate())";


    public DeleteDividendHandler(ControlManager controlManager) {
        this.controlManager = controlManager;
    }


    public String getId() {
        return "deleteDividend";
    }


    public String proceed(Node node) throws HandlerException {
        try {
            Map pks = XMLUtils.getPrimaryKeys(node);

            Connection con = getContext().getTxConnection();
            Database db = getContext().getDatabase();

        try {
                OQLQuery query = db.getOQLQuery(oql);
        query.bind(XMLUtils.convertFromStringValue(String.class, (String) pks.get("portfolioCode")));
            query.bind(XMLUtils.convertFromStringValue(java.sql.Timestamp.class, (String) pks.get("dividendDate")));


                QueryResults results = query.execute();
                if (results.hasMore() == false) {
                    throw new IllegalArgumentException("ligne non trouvée");
                }
        Dividend obj = (Dividend) results.next();


               PreparedStatement auditStmt = con.prepareStatement(AUDIT_SQL);

                PreparedStatement selectStmt = con.prepareStatement(SELECT_SQL);
                fillSqlQuery(selectStmt, pks);
                ResultSet rs = selectStmt.executeQuery();

                if (!rs.next()) {
                    throw new IllegalArgumentException("Erreur audit handler delete : pas de ligne à détruire!");
                }

                auditStmt.setString(1, getDbTableName());
                auditStmt.setString(2, buildFunctionKey(rs, getFunctionalKey()));
                auditStmt.setString(3, getContext().getUser());
                 try {
                    auditStmt.executeUpdate();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    throw new HandlerException("Erreur lors de l'audit de la suppression de la table "+getDbTableName());
                }


                removeBean(db, obj);


                executeControlForDelete(obj);

                String requestId = XMLUtils.getAttribute(node, "request_id");

                String expected = "<result request_id=\"" + requestId + "\"><primarykey>"

     + "<field name=\"portfolioCode\"/>"

     + "<field name=\"dividendDate\"/>"

                          + "</primarykey><row>"

     + "<field name=\"portfolioCode\">" + XMLUtils.convertToStringValue(obj.getPortfolioCode()) + "</field>"

     + "<field name=\"dividendDate\">" + XMLUtils.convertToStringValue(obj.getDividendDate()) + "</field>"

                         + "</row></result>";

                return expected;
            }
            finally {
                con.close();
                db.close();
            }
        }
        catch (Exception ex) {
            throw new HandlerException(ex);
        }
    }

    private void fillSqlQuery(final PreparedStatement query, final Map pks)
        throws SQLException {

            query.setString(1, XMLUtils.convertFromStringValue(String.class, (String) pks.get("portfolioCode")));

            query.setTimestamp(2, XMLUtils.convertFromStringValue(java.sql.Timestamp.class, (String) pks.get("dividendDate")));

        }


    private String buildFunctionKey(ResultSet rs, String functionalKey) throws SQLException {
        HashMap keyMap = new HashMap();
        StringTokenizer t = new StringTokenizer(functionalKey, ",");
        String functionalKeyStr = "";

        if (t.countTokens() == 1) {
            functionalKeyStr = functionalKey + "= '" + safeGetValueFromResultSet(rs,functionalKey)+"'";

        } else {

            while (t.hasMoreElements()) {
                String fieldName = t.nextElement().toString().trim();
                Object fieldValue = safeGetValueFromResultSet(rs,fieldName);
                keyMap.put(fieldName, fieldValue.toString());
            }
            int i = 0;

            Iterator iter = keyMap.keySet().iterator();
            while (iter.hasNext()) {
                String fieldName = (String) iter.next();
                functionalKeyStr += fieldName + "='" + (String) keyMap.get(fieldName) + "',";
            }
        }

        return functionalKeyStr.substring(0, functionalKeyStr.length() - 1);
    }

    private String safeGetValueFromResultSet(ResultSet rs, String fieldName) {
        try {
            return rs.getObject(fieldName).toString();
        } catch (Exception ee) {
            return "null";
        }
    }


    protected void removeBean(Database db,
        Dividend obj) throws PersistenceException {
        db.remove(obj);
    }

    protected void removeDataAudit(Database db,
            net.codjo.sif.data.DataAudit obj) throws PersistenceException {
        db.remove(obj);
    }

    private void executeControlForDelete(Dividend obj) throws ControlException {
        controlManager.controlDeletedEntity(obj);
    }

    private String getDbTableName(){
    return "AP_DIVIDEND";
    }
   private String getFunctionalKey() {
        return "portfolioCode,netDividend";
    }
     private String getStatus(){
    return "DELETE";
    }

         public static String toSqlName(String propertyName) {
        String sqlName = toSqlUpper(propertyName);
        if (sqlName.length() > 28) {
            throw new IllegalArgumentException("La colonne pour le field " + propertyName
                    + " dépasse 28 caractères ! C'est pas bien !! "
                    + " Et quand je dis que c'est pas bien, c'est que c'est vraiment pas bien !"
                    + " m'enfin, il faut relativiser quand meme, c'est pas le bout du monde "
                    + " je vais tout simplement bloquer la génération jusqu'a ce que vous "
                    + " corrigiez le probleme !");
        }
        return sqlName;
    }


     public static String toSqlUpper(String propertyName) {
         StringBuffer buffer = new StringBuffer();
         for (int i = 0; i < propertyName.length(); i++) {
             if (Character.isUpperCase(propertyName.charAt(i))) {
                 buffer.append('_');
             }
             buffer.append(propertyName.charAt(i));
         }

         String sqlName = buffer.toString().toUpperCase();
         return sqlName;
     }


}